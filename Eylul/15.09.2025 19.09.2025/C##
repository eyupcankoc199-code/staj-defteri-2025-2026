Task Parallel Library ile Paralel Merge Sort

Hem algoritmik zorluk hem de concurrency yönetimi içerir.

using System;
using System.Linq;
using System.Threading.Tasks;

class Program
{
    static void ParallelMergeSort(int[] arr, int left, int right)
    {
        if (left >= right) return;

        int mid = (left + right) / 2;

        Task leftTask = Task.Run(() => ParallelMergeSort(arr, left, mid));
        Task rightTask = Task.Run(() => ParallelMergeSort(arr, mid + 1, right));

        Task.WaitAll(leftTask, rightTask);

        Merge(arr, left, mid, right);
    }

    static void Merge(int[] arr, int left, int mid, int right)
    {
        int[] temp = new int[right - left + 1];
        int i = left, j = mid + 1, k = 0;

        while (i <= mid && j <= right)
            temp[k++] = (arr[i] <= arr[j]) ? arr[i++] : arr[j++];

        while (i <= mid) temp[k++] = arr[i++];
        while (j <= right) temp[k++] = arr[j++];

        for (int t = 0; t < temp.Length; t++)
            arr[left + t] = temp[t];
    }

    static void Main()
    {
        int[] data = Enumerable.Range(1, 20).OrderByDescending(x => x).ToArray();
        Console.WriteLine("Before: " + string.Join(", ", data));

        ParallelMergeSort(data, 0, data.Length - 1);

        Console.WriteLine("After : " + string.Join(", ", data));
    }
}
